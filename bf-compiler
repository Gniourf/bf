#!/bin/bash

# brainfuck compiler to Bash

# tested in bash 4.2
# probably works in older versions too but i don't really care

# usage: bf filename-of-your-bf-program
#        bf -c 'your-bf-code-here'

usage () {
  echo "\
  usage: bf filename-of-your-bf-program
         bf -c 'your-bf-code-here'"
}

while getopts :hc: opt; do
  case $opt in
    h) usage; exit ;;
    c) program=$OPTARG ;;
    :) echo "Missing argument for option -$OPTARG" >&2
       usage >&2; exit 1 ;;
    *) echo "Unknown option -$OPTARG" >&2
       usage >&2; exit 1 ;;
  esac
done
shift "$(( OPTIND - 1 ))"

if (( $# > 1 )); then
  echo "Too many arguments" >&2
  usage >&2
  exit 1
elif [[ ! -v program ]]; then
  if (( $# == 0 )); then
    usage >&2
    exit 1
  elif [[ -r $1 ]]; then
    program=$(< "$1")
  else
    echo "Couldn't read \`$1'" >&2
    exit 1
  fi
fi

# Strip unnecessary crap
program=${program//[!-[\]+.,><]}
len=${#program}

# Replace problematic [] with an underscore
program=${program//\[\]/_}
nb_brackets=0
printf 'declare -A tape\n'
printf 'cell=0\n'
printf 'LANG=C IFS=\n'

while [[ $program ]] && ((nb_brackets>=0)); do
   c=${program:0:1}
   a=1
   case $c in
   ('<'|'>'|'+'|'-')
      # Get as much as you can
      [[ $program =~ ^"$c"+ ]]
      d=${c/</-} d=${d/>/+}
      f=${c/[<>]/cell} f=${f/[+-]/tape\[\$cell\]}
      a=${#BASH_REMATCH[0]}
      if (( a == 1)); then
         printf '(( %s%s ))\n' "$d$d" "$f"
      else
         printf '(( %s%s=%d ))\n' "$f" "$d" "$a"
      fi
      ;;
   ('[') (( ++nb_brackets )); printf 'while ((tape[$cell])); do\n' ;;
   (']') (( --nb_brackets )); printf 'done\n' ;;
   ('_') printf 'while ((tape[$cell])); do :; done\n' ;;
   (.) printf 'if (( tape[$cell] >= 0 )); then
   printf -v output %%o "$(( tape[$cell] %% 256 ))"
else
   printf -v output %%o "$(( (-tape[$cell]) %% 256 ))"
fi
printf "\\\\$output"\n' ;;
   (,) printf "read -r -n1 -d '' input || exit 1\n"
       printf $'printf -v "tape[$cell]" %%d "\'$input"\\n' ;;
   esac
   program=${program:a}
done

