#!/bin/bash

# brainfuck interpreter

# EOF = 0
# 2**64-1 cells, both left and right of the starting position
# 8-bit values in cells, unless the environment variable INTEGERCELLS is found
# in which case it uses 64-bit integers

# it prints debug informations if the environment variable DEBUG is found


# tested in bash 4.3
# probably works in older versions too but i don't really care


# usage: bf filename-of-your-bf-program
#        bf -c 'your-bf-code-here'

debug () {
  [[ ! -v DEBUG ]] && return
  declare -p tape # sorry, this is now messy :D
  printf '\njump:'
  printf '<%s>' "${jump[@]}"
  printf '\ncell=%s i=%i code=%s\n' "$cell" "$i" "${code[i]}"
} >&2

declare -A tape=()
declare -i cell=0 i jump=() bracecount

# set it to an empty value if it's set to avoid messing with the math expansion
if [[ $INTEGERCELLS ]]; then INTEGERCELLS= ; fi

# needed to read bytes correctly
LANG=C IFS=

usage () {
  echo "\
  usage: bf filename-of-your-bf-program
         bf -c 'your-bf-code-here'"
}

while getopts :hc: opt; do
  case $opt in
    h) usage; exit ;;
    c) program=$OPTARG ;;
    :) echo "Missing argument for option -$OPTARG" >&2
       usage >&2; exit 1 ;;
    *) echo "Unknown option -$OPTARG" >&2
       usage >&2; exit 1 ;;
  esac
done
shift "$(( OPTIND - 1 ))"

if (( $# > 1 )); then
  echo "Too many arguments" >&2
  usage >&2
  exit 1
elif [[ ! -v program ]]; then
  if (( $# == 0 )); then
    usage >&2
    exit 1
  elif [[ -r $1 ]]; then
    program=$(< "$1")
  else
    echo "Couldn't read \`$1'" >&2
    exit 1
  fi
fi

# before we begin to loop, speed up as much as possible

# Strip unnecessary crap
program=${program//[!-[\]+.,><]}
len=${#program}

# Explode the string into an array and compute the jumps
open_brackets=()
i=0
for ((i=0;i<len;++i)); do
   char=${program:i:1}
   code+=( "$char" )
   case $char in
      ('[') open_brackets=( "$i" "${open_brackets[@]}" ) ;;
      (']')
            if ((${#open_brackets[@]}==0)); then
               printf >&2 'Missing [\n'
               exit 1
            fi
            jump[i]=${open_brackets[0]}
            jump[${open_brackets[0]}]=$i
            open_brackets=( "${open_brackets[@]:1}" )
            ;;
   esac
done
if ((${#open_brackets[@]})); then
   printf >&2 'Missing ]\n'
   exit 1
fi

i=-1
# Header
printf 'declare -A cell=()\n'
printf 'cell=0\n'
printf 'LANG=C IFS=\n'

# Jump mark
jump_mark=0
jump_stack=()
while (( i++ < len )); do
  [[ -v DEBUG ]] && debug
  case ${code[i]} in
   (+)   printf '(( tape[$cell]++ ))\n' ;;
   (-)   printf '(( tape[$cell]-- ))\n' ;;
   ('>') printf '(( ++cell ))\n' ;;
   ('<') printf '(( --cell ))\n' ;;
   (.) printf 'if (( tape[$cell] >= 0 )); then
         printf -v output %%o "$(( tape[$cell] %% 256 ))"
       else
         printf -v output %%o "$(( (-tape[$cell]) %% 256 ))"
       fi
       printf "\\\\$output"\n' ;;
   (,) printf 'read -r -n1 -d "" input\n'
       # technically this read is binary safe, but EOF = 0
       # unless you check read's return code
       printf $'printf -v "tape[$cell]" %%d "\'$input"\\n' ;;
   ('[') printf 'while ((tape[$cell])); do\n' ;;
   (']') printf 'done\n' ;;
  esac
done

